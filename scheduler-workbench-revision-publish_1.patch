diff --git a/scheduler_workbench.module b/scheduler_workbench.module
index 661a21d..5156519 100644
--- a/scheduler_workbench.module
+++ b/scheduler_workbench.module
@@ -62,16 +62,28 @@ function scheduler_workbench_form_alter(&$form, $form_state) {
   if (TRUE === isset($form['scheduler_settings'])) {
     $node = $form['#node'];
 
-    // Scheduler unpublishes nodes that are scheduled to be published.
-    // This causes workbench_moderation_node_history.published to become
-    // inconsistent. Do not let nodes with published revisions get a scheduled
-    // publish date.
     if (!empty($node->workbench_moderation['published'])) {
+      // We are creating a new draft of a published node and scheduled publishing
+      // is supported.
+      if (!empty($node->workbench_moderation['my_revision']) &&
+        ($node->workbench_moderation['published']->vid != $node->workbench_moderation['my_revision']->vid || workbench_moderation_node_type_moderated($form['type']['#value'])) &&
+        isset($form['scheduler_settings']['publish_on'])) {
+        $form['scheduler_settings']['revision_publish_on'] = $form['scheduler_settings']['publish_on'];
+        $form['scheduler_settings']['revision_publish_on']['#title'] = t('Publish revision on');
+        unset($node->publish_on);
+      }
+
+      // Scheduler unpublishes nodes that are scheduled to be published.
+      // This causes workbench_moderation_node_history.published to become
+      // inconsistent. Do not let nodes with published revisions get a scheduled
+      // publish date.
       $form['scheduler_settings']['publish_on']['#disabled'] = TRUE;
       $form['scheduler_settings']['publish_on']['#default_value'] = '';
       $form['scheduler_settings']['publish_on']['#description'] = t('A scheduled publish date may not be set because this content item already <a href="@url">has a published revision</a>.', array('@url' => url("node/$node->nid/moderation")));
     }
 
+
+
     // And we have unpublish settings.
     if (TRUE === isset($form['scheduler_settings']['unpublish_on'])) {
       $unpublish_time = variable_get('scheduler_unpublish_default_time_' . $node->type, '');
@@ -112,6 +124,40 @@ function scheduler_workbench_form_alter(&$form, $form_state) {
 }
 
 /**
+ * Implements hook_node_validate().
+ */
+function scheduler_workbench_node_validate($node, $form) {
+  $date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT);
+
+  if (!empty($node->revision_publish_on) && !is_numeric($node->revision_publish_on)) {
+    $publishtime = _scheduler_strtotime($node->revision_publish_on);
+    if ($publishtime === FALSE) {
+      form_set_error('revision_publish_on', t("The 'revision publish on' value does not match the expected format of %time", array('%time' => format_date(REQUEST_TIME, 'custom', $date_format))));
+    }
+    elseif ($publishtime && $publishtime < REQUEST_TIME) {
+      form_set_error('revision_publish_on', t("The 'revision publish on' date must be in the future"));
+    }
+  }
+}
+
+/**
+ * Implements hook_node_update().
+ */
+function scheduler_workbench_node_update($node) {
+  // only update database if we need to (un)publish this node at some date
+  // otherwise the user probably cleared out the (un)publish dates so we should remove the record
+  if (!empty($node->revision_publish_on)) {
+    db_merge('scheduler')
+      ->key(array('nid' => $node->nid))
+      ->fields(array(
+        'publish_on' => _scheduler_strtotime($node->revision_publish_on),
+        'unpublish_on' => $node->unpublish_on,
+      ))
+      ->execute();
+  }
+}
+
+/**
  * Implements hook_module_implements_alter().
  *
  * Moves form alter hooks to the end to make sure they are after scheduler.
@@ -124,6 +170,9 @@ function scheduler_workbench_module_implements_alter(&$implementations, $hook) {
       unset($implementations['scheduler_workbench']);
       $implementations['scheduler_workbench'] = $group;
       break;
+
+    case 'node_presave':
+      unset($implementations['scheduler']);
   }
 }
 
@@ -161,7 +210,53 @@ function _scheduler_workbench_scheduler_unpublish(&$node) {
  */
 function _scheduler_workbench_scheduler_pre_publish(&$node) {
   if ($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) {
+    if (!empty($node->workbench_moderation['my_revision']) &&
+      $node->workbench_moderation['my_revision']->state == $state) {
+      // There is already a published revision. We want to publish the current
+      // revision. Lets register a shutdown for that.
+      unset($node->publish_on);
+      $current = workbench_moderation_node_current_load($node);
+      drupal_register_shutdown_function('workbench_moderation_moderate', $current, $state);
+
+      // Set the current revision to transition to the unbpulished state.
+      $node->workbench_moderation_state_new = variable_get('scheduler_unpublish_moderation_state_' . $node->type, workbench_moderation_state_none());
+    }
+
     $node->workbench_moderation_state_current = $node->workbench_moderation['my_revision']->state;
-    $node->workbench_moderation_state_new = $state;
+    if (empty($node->workbench_moderation_state_new)) {
+      $node->workbench_moderation_state_new = $state;
+    }
+  }
+}
+
+
+/**
+ * Implements hook_node_presave().
+ */
+function scheduler_workbench_node_presave($node) {
+  // Store the original state.
+  $status = $node->status;
+  // Let schedule_node_presave() run.
+  scheduler_node_presave($node);
+  if (($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) &&
+    !empty($node->workbench_moderation['my_revision']) &&
+      $node->workbench_moderation['my_revision']->state == $state) {
+    // Set things back the way they were.
+    $node->status = $status;
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() for workbench_moderation_moderate_form()
+ */
+function scheduler_workbench_form_workbench_moderation_moderate_form_alter(&$form, $form_state) {
+  if (!empty($form['node']['#value'])) {
+    $node = $form['node']['#value'];
+    if (($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) &&
+      !empty($node->workbench_moderation['published']) &&
+      !empty($node->publish_on)) {
+      $date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT);
+      $form['#suffix'] = '<div class="scheduler-workbench-notice"><strong>' . t('This revision will be published @publish_time.', array('@publish_time' => format_date($node->publish_on, 'custom', $date_format))) . '</strong></div>';
+    }
   }
 }
